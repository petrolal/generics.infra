pipeline {
  agent any
  options { timestamps(); ansiColor('xterm') }

  environment {
    SSH_CRED = 'srv-websphere-ssh'
    DEV_HOST  = 'liberty-dev.example.com'
    HML_HOST  = 'liberty-hml.example.com'
    PROD_HOST = 'liberty-prod.example.com'
  }

  stages {
    stage('Checkout'){ steps { checkout scm } }

    stage('Resolver ambiente e gerar .env') {
      steps {
        script {
          def host =
            (env.BRANCH_NAME == 'infra-dev')  ? env.DEV_HOST  :
            (env.BRANCH_NAME == 'infra-hml')  ? env.HML_HOST  :
            (env.BRANCH_NAME == 'infra-prod') ? env.PROD_HOST : null
          if (!host) { error "Branch ${env.BRANCH_NAME} não mapeada para ambiente." }
          env.TARGET_HOST = host
        }
        withCredentials([
          string(credentialsId: 'cred_liberty_admin_password', variable: 'LIBERTY_ADMIN_PASSWORD'),
          string(credentialsId: 'cred_db2_instance_password', variable: 'DB2_INSTANCE_PASSWORD')
        ]) {
          sh '''
            cat > .env <<'EOF'
WEB_HTTP_PORT=9080
WEB_HTTPS_PORT=9443
LIBERTY_ADMIN_USER=admin
LIBERTY_ADMIN_PASSWORD=''''${LIBERTY_ADMIN_PASSWORD}''''
DB2_HOST=db2
DB2_PORT=50000
DB2_NAME=mydb
DB2_USER=db2inst1
DB2_PASSWORD=''''${DB2_INSTANCE_PASSWORD}''''
DB2_JNDI=jdbc/myDb2
DB2_INSTANCE=db2inst1
DB2_INSTANCE_PASSWORD=''''${DB2_INSTANCE_PASSWORD}''''
EOF
            grep -v -E '(PASSWORD|PASS)' .env || true
          '''
        }
      }
    }

    stage('Publicar infra e subir Compose') {
      steps {
        sshagent(credentials: [env.SSH_CRED]) {
          sh """
            rsync -avz -e 'ssh -o StrictHostKeyChecking=no' ./ \${TARGET_HOST}:/opt/infra/
            ssh -o StrictHostKeyChecking=no \${TARGET_HOST} '
              cd /opt/infra &&
              docker compose pull &&
              docker compose up -d &&
              docker compose ps
            '
          """
        }
      }
    }

    stage('Health-check Liberty & Db2') {
      steps {
        sshagent(credentials: [env.SSH_CRED]) {
          sh """
            ssh -o StrictHostKeyChecking=no \${TARGET_HOST} '
              for i in {1..30}; do
                code=$(curl -k -s -o /dev/null -w "%{http_code}" "https://localhost:9443/adminCenter") || true
                [ "$code" = "200" ] && echo "Liberty OK" && break
                sleep 2
              done
              set +e
              source /opt/infra/.env
              for i in {1..30}; do
                docker exec db2 bash -lc "su - $DB2_INSTANCE -c \\"db2 CONNECT TO $DB2_NAME\\"" >/dev/null 2>&1 && { echo "Db2 OK"; exit 0; }
                sleep 4
              done
              echo "Db2 não respondeu"; exit 1
            '
          """
        }
      }
    }
  }

  post { always { archiveArtifacts artifacts: '.env', onlyIfSuccessful: false } }
}
